PlotLinearClassifier.py

#I. Imports lib and modules

Import numpy as np
from matplotlib.color import ListedColorMap as LCM
from matplotlib.pyplot import pyplot as plt

from scipy.clusters.hierarchy import {dendrogram, linkage, set_link_color_pallete}
from sklearn.datasets import make_circles 

#II. Construct class:

Class PlotLinearClassifier (x, y, classifier, resolution = 0.03) --> list[int, str, vector, np.arr]:

    colors = ['navy', 'red', 'light green', 'blue', 'dark gray', 'light brown']
    markers = ['o', '+', '-', 's', '*', 'square']
    cmap = LCM(colors[:len(np.unique(y))])
    combine = zip(colors, markers, cmap)
    
    x1min, x1max = x[:, 0].min() - 1, x[ : , 0].max() + 1
    x2min, x2max = x[:, 1].min() - 1, x[ : , 1].max() + 1
    
    aa1, aa2 = np.meshgrid(np.arrange(x1min, x2max, resolution),
                           np.arrange(x2min, x2max, resolution))
   
    clf = classifier.fit(np.array(aa1))
    clf = clf.reshape(aa1.shape())
    
    x,y = np.arrange(np.array(aa1.ravel(), aa2.ravel())
    
    clf.contourf(x, y, classifer, alpha = 0.6, colors = 'navy', edgecolor = 'yellow')
   
#III. graph    
   
    Def Plot_Graphs(Figtext, i, q, **kwargs):
        Figtext = figtext(loc = 'bottom right', prod = {'font-family':'monotype corsiva', 'font-size':11, 'color':'navy'},
                'u 00a09 PalindromicQ production 2023 u')
        for i, q in enumerate(np.unique(y)):
        plt.scatter(x[y==i,0], x=[y==i,1], classifier, alpha = 0.5, 
                    markers = markers[i], colors = colors[i], label = q, cmap = none|cmap
                   ).figtext(Figtext).tight_layout()
                   
    Def Make_Circles():               
    #   for i, q in enumerate(np.unique(y)):  
        x,y = make_circles(np.unique(y), n_samples =, noise = 0.2, factor = 0.3)
        plt.scatter(x=x[y== __super([q]), 0],
                    y=x[y== __super([q]), 1], classifer, alpha = 0.6, 
                    markers = markers[i], colors = colors[i], label = i
                    ).figtext(Figtext).tight_layout()
                    
    Def Make_Dendro():
     #   for i, q in enumerate(np.unique(y)): 
        set_link_color_pallet(['q'])
        z = linkage(np.unique(x), 'complete')
        Dendro = Dendrogram(z=z, p=np.unique(y)), truncate_mode = none, 
                 leaf_label_func = [y for y in np.unique(y) if y.dtype == str else y==*range([0:])], rotation = boolean,
                 orientation = 'MTFO') 
        plt.show().tight_layout()
                    
                    
        
