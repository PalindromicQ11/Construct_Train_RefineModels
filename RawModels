RawModels.py
#1 import Machine Learning packages

Import { time, tree }
Import Decision_Tree
From sklearn import { Kneighbors, preprocessing, datasets }
from sklearn.preprocessing import { MinMaxScaler,NormalizeScaler, StandardScaler, imputer, Cluster, PolynomialsFeatures, LabelEncoder, Binarizer } 
from sklearn.Model_Selection import { Linear_Regression, Logistic_Regression }
from sklearn.metrics import { MeanSquareError, MeanAbsoluteError, R2_Score }
from sklearn.cross_valindation import Cross_Validation_Score
from sklearn.SVM import { SVC, PCA, SVR }
from sklearn.GridSearch import GridSearchCV
from sklearn.RandomSearch import RandomSearchCV


Class __Preprocessing__():
    def DimensionReduction()--> list[int, array, vector]:
       
    def TrainData():
        Xfeatures = df()
        YTargets = df.iloc[' ']
        X_train, Y_train, X_test, Y_test = Train_Test_Split(x=' ', y='', test_size= 0.6, random_state = 0)
    
    NormalScaler = NormalizeScaler().fit_transform(X_train)
    StandardScaler = StandardScaler().fit_transorm(Y_train)
 
    
    def DimensionReduction():
        #QuadraticReductionAnalysis
        #FlexibleReductionAnalysis
        #ReductionAnalysis
        
Class __ModelSelection__(self, LineReg, LogReg):

    Class __LinearReg__():
        LineReg:= Linear_Regression().fit(x_train)
        x_test = LineReg.transform(x_test)
        
        def __SVM__():
            SVC = SVC().fit_transform(x_train)
            
        def __SVR__():
            SVR = SRV().fit_transorm(X_train)
            
        
    def __LogReg__():
        Logit = LogisticRegression().fit_transform(x_train)
        
    
Class __ModelEvaluation__(self, MAE, MSE) --> list[int, arr, float]:
    def __MAE__(self):
        MAE = Mean_Absolute_Error(X_train)
        pred = MAE.predict(x_test)
        
    def __MSE__(self):
        MSE = Mean_Square_Error(X_train)
        pred = MSE.Predict(X_test)
        
    def __R2Score__(self):
        R2score = R2_score(X_train)
        
    Def UnsupervisedTrain():
    While:
        @UnsupervisedTrain.wraps()
        KNN = Neighbors.Kneighbors(k=#)
    
    
    
    Def SupervisedTrain():
    While:
        @SupervisedTrain.wraps()
        LR = MachineLearing.Linear_Regression()
        MLR = MachineLearning.Multiple_Regression()
        
Class __RefineModels__(self): 
    Grid = GridSearchCV(X_train)
    
        
    
